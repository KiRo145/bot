import telebot
import base64
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
import requests

TOKEN = '7428759049:AAHj2YC7eKg8gKHT3nLzbEUZMOEUt4eJEOM'
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_steps = {}
user_data = {}
test_results = {}
user_messages = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–Ω–æ–ø–æ–∫ —Å –∏—Ö ID
request_type_mapping = {
    "–ê–≤–∞—Ä–∏—è": 716,
    "–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ": 718,
    "–û–±—É—á–µ–Ω–∏–µ":798,
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24": 720,
    "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": 722,
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞": 724
}

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
test_questions = [
    {
        "question": "–ö–∞–∫ –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ?",
        "answers": [
            "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ç–∞—Ä–∏—Ñ",
            "–£–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç—å –∑–∞–¥–∞—á, —á—Ç–æ–± –∏—Ö —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–æ 100 –∏–ª–∏ –º–µ–Ω—å—à–µ",
            "–ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –≤–∫–ª—é—á–∏—Ç—å –≤–∞–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
        ],
        "correct": 1
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –ë–ï–°–ü–õ–ê–¢–ù–´–• –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –∞—Ä—Ö–∏–≤–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ ¬´–ö–æ–º–ø–∞–Ω–∏—è¬ª?",
        "answers": ["1", "2", "5", "10"],
        "correct": 3
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å—Ç–∞–¥–∏–π –ø–æ —Å–¥–µ–ª–∫–µ?",
        "answers": [
            "–°—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∫–æ–º–ø–∞–Ω–∏–∏",
            "–î–≤–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∞ –æ–¥–Ω–∞, –∫–æ–º–ø–∞–Ω–∏—è –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ",
            "–û–¥–Ω–∞, –æ–Ω–∞ —É–∂–µ –∑–∞–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"
        ],
        "correct": 0
    },
    {
        "question": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä—É–≥–æ–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É. –ì–¥–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è?",
        "answers": [
            "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å, –æ–ø—Ü–∏—è  –ø–æ–ª—è ‚Äú–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞‚Äù",
            "–° –ø–æ–º–æ—â—å—é –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–º –≤ —à–∞–±–ª–æ–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ \"–ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\"",
            "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞, –º–µ–Ω—é \"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞\", –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã\""
        ],
        "correct": 2
    },
    {
        "question": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–µ–¥–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç:",
        "answers": [
            "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ —Ç–µ–∫—É—â–µ–π —Å–¥–µ–ª–∫–µ",
            "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–ø—Ä–æ—Å–∏—Ç —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø–∏—Å—å–º–æ –∫ —Ç–µ–∫—É—â–µ–π?",
            "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞"
        ],
        "correct": 0
    }
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user_messages(chat_id):
    if chat_id in user_messages:
        for msg_id in user_messages[chat_id]:
            try:
                bot.delete_message(chat_id, msg_id)
            except telebot.apihelper.ApiTelegramException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        user_messages[chat_id] = []  # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
def request_next_part_of_data(message):
    chat_id = message.chat.id
    step = user_steps.get(chat_id, 0)

    if chat_id not in user_messages:
        user_messages[chat_id] = []

    if step == 0:
        user_data[chat_id] = {'chat_id': chat_id}  # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ chat_id
        msg = bot.send_message(chat_id, "–î–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä–µ–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 1

    elif step == 1:
        user_data[chat_id]['companyname'] = message.text
        markup = types.InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            types.InlineKeyboardButton(text="üî•–ê–≤–∞—Ä–∏—èüî•", callback_data='–ê–≤–∞—Ä–∏—è'),
            types.InlineKeyboardButton(text="‚ùå–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ‚ùå", callback_data='–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ'),
            types.InlineKeyboardButton(text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24‚öôÔ∏è", callback_data='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24'),
            types.InlineKeyboardButton(text="üßëüèª‚Äçüéì–û–±—É—á–µ–Ω–∏–µüë©üèª‚Äçüéì", callback_data='–û–±—É—á–µ–Ω–∏–µ'),
            types.InlineKeyboardButton(text="üìû–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—èüìû", callback_data='–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'),
            types.InlineKeyboardButton(text="üîß–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞üîß", callback_data='–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞')
        )
        msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=markup)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 2

    elif step == 2:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        user_messages[chat_id].append(msg.message_id)

    # –ê–≤–∞—Ä–∏—è
    elif step == 3 and user_data[chat_id]['request_type'] == 716:  # 716 ‚Äî —ç—Ç–æ ID –¥–ª—è "–ê–≤–∞—Ä–∏—è"
        user_data[chat_id]['issue'] = message.text
        msg = bot.send_message(chat_id, "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.(–ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ñ–∞–π–ª–æ–º, –±–µ–∑ —Å–∂–∞—Ç–∏—è)")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 4

    elif step == 4 and user_data[chat_id]['request_type'] == 716:
        user_data[chat_id]['screenshots'] = message.document if message.document else None  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—ã
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 5

    elif step == 5 and user_data[chat_id]['request_type'] == 716:
        user_data[chat_id]['name'] = message.text
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        contact_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        markup.add(contact_button)
        msg = bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 6

    elif step == 6 and user_data[chat_id]['request_type'] == 716:
        if message.contact:
            user_data[chat_id]['phone'] = message.contact.phone_number
        else:
            user_data[chat_id]['phone'] = message.text
        add_lead_to_bitrix24_avaria(user_data[chat_id])  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Bitrix24
        user_steps[chat_id] = 0

    # –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ
    elif step == 3 and user_data[chat_id]['request_type'] == 718:  # 718 ‚Äî —ç—Ç–æ ID –¥–ª—è "–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ"
        user_data[chat_id]['error_description'] = message.text
        msg = bot.send_message(chat_id, "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ñ–∞–π–ª–æ–º.(–±–µ–∑ —Å–∂–∞—Ç–∏—è)")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 4

    elif step == 4 and user_data[chat_id]['request_type'] == 718:
        user_data[chat_id]['screenshots'] = message.document if message.document else None  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—ã
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 5

    elif step == 5 and user_data[chat_id]['request_type'] == 718:
        user_data[chat_id]['name'] = message.text
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        contact_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        markup.add(contact_button)
        msg = bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 6

    elif step == 6 and user_data[chat_id]['request_type'] == 718:
        if message.contact:
            user_data[chat_id]['phone'] = message.contact.phone_number
        else:
            user_data[chat_id]['phone'] = message.text
        add_lead_to_bitrix24_error(user_data[chat_id])  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Bitrix24
        user_steps[chat_id] = 0

    # –û–±—É—á–µ–Ω–∏–µ
    elif step == 3 and user_data[chat_id]['request_type'] == 798:  # 798 ‚Äî —ç—Ç–æ ID –¥–ª—è "–û–±—É—á–µ–Ω–∏–µ"
        user_data[chat_id]['training_topic'] = message.text
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 4

    elif step == 4 and user_data[chat_id]['request_type'] == 798:
        user_data[chat_id]['name'] = message.text
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        contact_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        markup.add(contact_button)
        msg = bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 5

    elif step == 5 and user_data[chat_id]['request_type'] == 798:
        if message.contact:
            user_data[chat_id]['phone'] = message.contact.phone_number
        else:
            user_data[chat_id]['phone'] = message.text
        add_lead_to_bitrix24_teach(user_data[chat_id])  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Bitrix24
        user_steps[chat_id] = 0

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24
    elif step == 3 and user_data[chat_id]['request_type'] == 720:  # 720 ‚Äî —ç—Ç–æ ID –¥–ª—è "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24"
        user_data[chat_id]['customization_request'] = message.text
        msg = bot.send_message(chat_id, "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –¢–ó / –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å.")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 4

    elif step == 4 and user_data[chat_id]['request_type'] == 720:
        user_data[chat_id]['attachments'] = message.document if message.document else None  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 5

    elif step == 5 and user_data[chat_id]['request_type'] == 720:
        user_data[chat_id]['name'] = message.text
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        contact_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        markup.add(contact_button)
        msg = bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 6

    elif step == 6 and user_data[chat_id]['request_type'] == 720:
        if message.contact:
            user_data[chat_id]['phone'] = message.contact.phone_number
        else:
            user_data[chat_id]['phone'] = message.text
        add_lead_to_bitrix24_settings(user_data[chat_id])  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Bitrix24
        user_steps[chat_id] = 0

    # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    elif step == 3 and user_data[chat_id]['request_type'] == 724:
        user_data[chat_id]['files'] = message.document if message.document else None
        msg = bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ–∞–π–ª–∞–º:")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 4

    elif step == 4 and user_data[chat_id]['request_type'] == 724:
        user_data[chat_id]['comments'] = message.text
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 5


    elif step == 5 and user_data[chat_id]['request_type'] == 724:
        user_data[chat_id]['name'] = message.text
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        contact_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        markup.add(contact_button)
        msg = bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, request_next_part_of_data)
        user_messages[chat_id].append(msg.message_id)
        user_steps[chat_id] = 6

    elif step == 6 and user_data[chat_id]['request_type'] == 724:
        if message.contact:
            user_data[chat_id]['phone'] = message.contact.phone_number
        else:
            user_data[chat_id]['phone'] = message.text
        add_lead_to_bitrix24_dev(user_data[chat_id])  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Bitrix24
        user_steps[chat_id] = 0

    elif step == 3 and user_data[chat_id]['request_type'] == 722: #–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        user_data[chat_id]['name'] = message.text
        ask_for_contact(chat_id)
        user_steps[chat_id] = 0


def ask_for_contact(chat_id):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    contact_button = KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(contact_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, handle_contact)


def handle_contact(message):
    chat_id = message.chat.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if message.contact:
        user_data[chat_id]['phone'] = message.contact.phone_number
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data[chat_id]['phone'] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ü–µ—Ä–µ–≤–æ–∂—É –≤–∞—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    send_message_to_chat(
        user_data[chat_id]['companyname'],
        user_data[chat_id]['name'],
        user_data[chat_id]['phone']
    )  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Bitrix24

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥–∏
    user_steps[chat_id] = 0


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —à–∞–≥–æ–≤ —Ñ–∏–¥–±–µ–∫–∞
def ask_feedback_question(message):
    chat_id = message.chat.id
    step = user_steps.get(chat_id, 1)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏–ª–∏ —Å—Ç–∞–≤–∏–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if step == 1:
        msg = bot.send_message(chat_id, "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        user_steps[chat_id] = 2
        bot.register_next_step_handler(msg, ask_feedback_question)

    elif step == 2:
        user_data[chat_id]['name'] = message.text
        msg = bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        user_steps[chat_id] = 3
        bot.register_next_step_handler(msg, ask_feedback_question)

    elif step == 3:
        user_data[chat_id]['company'] = message.text
        msg = bot.send_message(chat_id, "–ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –Ω–∞—à–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ?")
        user_steps[chat_id] = 4
        bot.register_next_step_handler(msg, ask_feedback_question)

    elif step == 4:
        user_data[chat_id]['liked'] = message.text
        msg = bot.send_message(chat_id, "–ß—Ç–æ –ø—Ä–µ–≤–∑–æ—à–ª–æ –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è?")
        user_steps[chat_id] = 5
        bot.register_next_step_handler(msg, ask_feedback_question)

    elif step == 5:
        user_data[chat_id]['exceeded_expectations'] = message.text
        msg = bot.send_message(chat_id, "–ú–æ–∂–µ—Ç–µ –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞—Å?")
        user_steps[chat_id] = 6
        bot.register_next_step_handler(msg, ask_feedback_question)

    elif step == 6:
        user_data[chat_id]['recommend'] = message.text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Bitrix24
        add_feedback_to_bitrix24(user_data[chat_id])

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=types.ReplyKeyboardRemove())

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        user_data.pop(chat_id, None)
        user_steps.pop(chat_id, None)
        user_steps[chat_id] = 0

def ask_claim_question(message):
    chat_id = message.chat.id
    step = user_steps.get(chat_id, 1)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏–ª–∏ —Å—Ç–∞–≤–∏–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if step == 1:
        msg = bot.send_message(chat_id, "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        user_steps[chat_id] = 2
        bot.register_next_step_handler(msg, ask_claim_question)

    elif step == 2:
        user_data[chat_id]['name'] = message.text
        msg = bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        user_steps[chat_id] = 3
        bot.register_next_step_handler(msg, ask_claim_question)

    elif step == 3:
        user_data[chat_id]['company'] = message.text
        msg = bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
        user_steps[chat_id] = 4
        bot.register_next_step_handler(msg, ask_claim_question)

    elif step == 4:
        user_data[chat_id]['position'] = message.text
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        contact_button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        markup.add(contact_button)
        msg = bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
        user_steps[chat_id] = 5
        bot.register_next_step_handler(msg, ask_claim_question)

    elif step == 5:
        if message.contact:
            user_data[chat_id]['phone'] = message.contact.phone_number
        else:
            user_data[chat_id]['phone'] = message.text
        msg = bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à Email")
        user_steps[chat_id] = 6
        bot.register_next_step_handler(msg, ask_claim_question)

    elif step == 6:
        user_data[chat_id]['email'] = message.text
        msg = bot.send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é")
        user_steps[chat_id] = 7
        bot.register_next_step_handler(msg, ask_claim_question)

    elif step == 7:
        user_data[chat_id]['description'] = message.text
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Bitrix24
        add_claim_to_bitrix24(user_data[chat_id])

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å—Ç–∞—Ç—å –Ω–∞–º –ª—É—á—à–µ!", reply_markup=types.ReplyKeyboardRemove())

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        user_data.pop(chat_id, None)
        user_steps.pop(chat_id, None)
        user_steps[chat_id] = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ Bitrix24
def add_claim_to_bitrix24(data):
    BITRIX24_WEBHOOK_URL = "https://tamplier.bitrix24.ru/rest/572/rebx9fxt0uas87fp/crm.item.add.json?entityTypeId=1040"

    payload = {
        "fields": {
            "TITLE": f"–ó–∞–º–µ—á–∞–Ω–∏–µ –æ—Ç {data['name']}",
            'ufCrm42_1727215586844': data['name'],
            'ufCrm42_1727215595862': data['company'],
            'ufCrm42_1727215605371': data['position'],
            'ufCrm42_1727215615528': data['phone'],
            'ufCrm42_1727215623763': data['email'],
            'ufCrm42_1727215669357': data['description']
        }
    }
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    try:
        response = requests.post(BITRIX24_WEBHOOK_URL, json=payload, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    except requests.exceptions.RequestException as e:
        print(f"Failed to send feedback to Bitrix24: {response.text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ Bitrix24
def add_feedback_to_bitrix24(data):
    BITRIX24_WEBHOOK_URL = "https://tamplier.bitrix24.ru/rest/572/rebx9fxt0uas87fp/crm.item.add.json?entityTypeId=1044"

    payload = {
        "fields": {
            "TITLE": f"–û—Ç–∑—ã–≤ –æ—Ç {data['name']}",
            'ufCrm44_1727215941830': data['name'],
            'ufCrm44_1727215952066': data['company'],
            'ufCrm44_1727215969231': data['liked'],
            'ufCrm44_1727215983425': data['exceeded_expectations'],
            'ufCrm44_1727216001868': data['recommend']  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        }
    }
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    try:
        response = requests.post(BITRIX24_WEBHOOK_URL, json=payload, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    except requests.exceptions.RequestException as e:
        print(f"Failed to send feedback to Bitrix24: {response.text}")

#–≠–ª–µ–º–µ–Ω—Ç —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ê–≤–∞—Ä–∏–∏
def add_lead_to_bitrix24_avaria(data):
    BITRIX24_WEBHOOK_URL = "https://tamplier.bitrix24.ru/rest/572/rebx9fxt0uas87fp/crm.item.add.json?entityTypeId=1036"
    payload = {
        "fields": {
            "TITLE": f"{data['name']} {data['phone']}",
            "NAME": data['name'],
            'ufCrm40_1724763200': data['request_type'],
            'ufCrm40_1724763274': data['issue'],
            'ufCrm40_1725624322023': data['companyname'],
            "PHONE": [{"VALUE": data['phone'], "VALUE_TYPE": "WORK"}]
        }
    }
    if 'screenshots' in data and data['screenshots']:
        file_id = data['screenshots'].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å Telegram
        file_content = bot.download_file(file_path)
        # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Base64
        file_base64 = base64.b64encode(file_content).decode('utf-8')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫ –∑–∞–ø—Ä–æ—Å—É
        payload['fields']['ufCrm40_1724763290'] = [
            {
                "name": "filename.ext",
                "content": file_base64
            }
        ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    try:
        response = requests.post(BITRIX24_WEBHOOK_URL, json=payload, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    except requests.exceptions.RequestException as e:

        return

    if response.status_code == 200:
        lead_id = response.json().get("result", {}).get("item", {}).get("id")
        if lead_id:
            delete_user_messages(data['chat_id'])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ
            send_confirmation_message_avaria(data.get('chat_id'), lead_id, data['companyname'], data['issue'], data['name'],data['phone'])
    else:
        print(f"Failed to add lead to Bitrix24: {response.text}")

#–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ê–≤–∞—Ä–∏–∏
def send_confirmation_message_avaria(chat_id, lead_id, companyname, issue, name, phone):
    if not chat_id:
        print("Chat ID is missing")
        return

    message_text = f"–°–ø–∞—Å–∏–±–æ, {name}!\n" \
                   f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –ï–π –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä - {lead_id}.\n" \
                   f"–°–æ—Å—Ç–∞–≤ –∑–∞—è–≤–∫–∏:\n1.–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {companyname}\n" \
                   f"2.–ó–∞–¥–∞—á–∞: {issue}\n" \
                   f"3.–ò–º—è: {name}\n" \
                   f"4.–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"

    try:
        bot.send_message(chat_id, message_text)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error sending message to chat {chat_id}: {e}")

#–≠–ª–µ–º–µ–Ω—Ç —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –û—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ
def add_lead_to_bitrix24_error(data):
    BITRIX24_WEBHOOK_URL = "https://tamplier.bitrix24.ru/rest/572/rebx9fxt0uas87fp/crm.item.add.json?entityTypeId=1036"
    payload = {
        "fields": {
            "TITLE": f"{data['name']} {data['phone']}",
            "NAME": data['name'],
            'ufCrm40_1724763200': data['request_type'],
            'ufCrm40_1724763274': data['error_description'],
            'ufCrm40_1725624322023': data['companyname'],
            "PHONE": [{"VALUE": data['phone'], "VALUE_TYPE": "WORK"}]
        }
    }
    if 'screenshots' in data and data['screenshots']:
        file_id = data['screenshots'].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å Telegram
        file_content = bot.download_file(file_path)
        # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Base64
        file_base64 = base64.b64encode(file_content).decode('utf-8')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫ –∑–∞–ø—Ä–æ—Å—É
        payload['fields']['ufCrm40_1724763290'] = [
            {
                "name": "filename.ext",
                "content": file_base64
            }
        ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    try:
        response = requests.post(BITRIX24_WEBHOOK_URL, json=payload, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    except requests.exceptions.RequestException as e:

        return

    if response.status_code == 200:
        lead_id = response.json().get("result", {}).get("item", {}).get("id")
        if lead_id:
            delete_user_messages(data['chat_id'])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ
            send_confirmation_message_teach(data.get('chat_id'), lead_id, data['companyname'], data['error_description'], data['name'],data['phone'])
    else:
        print(f"Failed to add lead to Bitrix24: {response.text}")

#–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –û—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ
def send_confirmation_message_error(chat_id, lead_id, companyname, error_description, name, phone):
    if not chat_id:
        print("Chat ID is missing")
        return

    message_text = f"–°–ø–∞—Å–∏–±–æ, {name}!\n" \
                   f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –ï–π –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä - {lead_id}.\n" \
                   f"–°–æ—Å—Ç–∞–≤ –∑–∞—è–≤–∫–∏:\n1.–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {companyname}\n" \
                   f"2.–ó–∞–¥–∞—á–∞: {error_description}\n" \
                   f"3.–ò–º—è: {name}\n" \
                   f"4.–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"

    try:
        bot.send_message(chat_id, message_text)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error sending message to chat {chat_id}: {e}")

#–≠–ª–µ–º–µ–Ω—Ç —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –û–±—É—á–µ–Ω–∏–µ
def add_lead_to_bitrix24_teach(data):
    BITRIX24_WEBHOOK_URL = "https://tamplier.bitrix24.ru/rest/572/rebx9fxt0uas87fp/crm.item.add.json?entityTypeId=1036"
    payload = {
        "fields": {
            "TITLE": f"{data['name']} {data['phone']}",
            "NAME": data['name'],
            'ufCrm40_1724763200': data['request_type'],
            'ufCrm40_1724763274': data['training_topic'],
            'ufCrm40_1725624322023': data['companyname'],
            "PHONE": [{"VALUE": data['phone'], "VALUE_TYPE": "WORK"}]
        }
    }
    response = requests.post(BITRIX24_WEBHOOK_URL, json=payload)
    if response.status_code == 200:
        lead_id = response.json().get("result", {}).get("item", {}).get("id")
        if lead_id:
            delete_user_messages(data['chat_id'])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ
            send_confirmation_message_teach(data.get('chat_id'), lead_id, data['companyname'], data['training_topic'], data['name'],data['phone'])
    else:
        print(f"Failed to add lead to Bitrix24: {response.text}")

#–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –û–±—É—á–µ–Ω–∏–µ
def send_confirmation_message_teach(chat_id, lead_id, companyname, training_topic, name, phone):
    if not chat_id:
        print("Chat ID is missing")
        return

    message_text = f"–°–ø–∞—Å–∏–±–æ, {name}!\n" \
                   f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –ï–π –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä - {lead_id}.\n" \
                   f"–°–æ—Å—Ç–∞–≤ –∑–∞—è–≤–∫–∏:\n1.–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {companyname}\n" \
                   f"2.–ó–∞–¥–∞—á–∞: {training_topic}\n" \
                   f"3.–ò–º—è: {name}\n" \
                   f"4.–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"

    try:
        bot.send_message(chat_id, message_text)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error sending message to chat {chat_id}: {e}")

#–≠–ª–µ–º–µ–Ω—Ç —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24
def add_lead_to_bitrix24_settings(data):
    BITRIX24_WEBHOOK_URL = "https://tamplier.bitrix24.ru/rest/572/rebx9fxt0uas87fp/crm.item.add.json?entityTypeId=1036"
    payload = {
        "fields": {
            "TITLE": f"{data['name']} {data['phone']}",
            "NAME": data['name'],
            'ufCrm40_1724763200': data['request_type'],
            'ufCrm40_1724763274': data['customization_request'],
            'ufCrm40_1725624322023': data['companyname'],
            "PHONE": [{"VALUE": data['phone'], "VALUE_TYPE": "WORK"}]
        }
    }
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ Base64
    if 'attachments' in data and data['attachments']:
        file_id = data['attachments'].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å Telegram
        file_content = bot.download_file(file_path)
        # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Base64
        file_base64 = base64.b64encode(file_content).decode('utf-8')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫ –∑–∞–ø—Ä–æ—Å—É
        payload['fields']['ufCrm40_1724763290'] = [
            {
                "name": "filename.ext",
                "content": file_base64
            }
        ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    try:
        response = requests.post(BITRIX24_WEBHOOK_URL, json=payload, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    except requests.exceptions.RequestException as e:

        return

    if response.status_code == 200:
        lead_id = response.json().get("result", {}).get("item", {}).get("id")
        if lead_id:
            delete_user_messages(data['chat_id'])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ
            send_confirmation_message_settings(data.get('chat_id'), lead_id, data['companyname'], data['customization_request'], data['name'],data['phone'])
    else:
        print(f"Failed to add lead to Bitrix24: {response.text}")

#–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24
def send_confirmation_message_settings(chat_id, lead_id, companyname, customization_request, name, phone):
    if not chat_id:
        print("Chat ID is missing")
        return

    message_text = f"–°–ø–∞—Å–∏–±–æ, {name}!\n" \
                   f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –ï–π –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä - {lead_id}.\n" \
                   f"–°–æ—Å—Ç–∞–≤ –∑–∞—è–≤–∫–∏:\n1.–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {companyname}\n" \
                   f"2.–ó–∞–¥–∞—á–∞: {customization_request}\n" \
                   f"3.–ò–º—è: {name}\n" \
                   f"4.–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"

    try:
        bot.send_message(chat_id, message_text)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error sending message to chat {chat_id}: {e}")

#–≠–ª–µ–º–µ–Ω—Ç —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
def add_lead_to_bitrix24_dev(data):
    BITRIX24_WEBHOOK_URL = "https://tamplier.bitrix24.ru/rest/572/rebx9fxt0uas87fp/crm.item.add.json"

    payload = {
        "entityTypeId": 1036,
        "fields": {
            "TITLE": f"{data['name']} {data['phone']}",
            "NAME": data['name'],
            'ufCrm40_1724763200': data['request_type'],
            'ufCrm40_1724763274': data['comments'],
            'ufCrm40_1725624322023': data['companyname'],
            "PHONE": [{"VALUE": data['phone'], "VALUE_TYPE": "WORK"}]
        }
    }

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ Base64
    if 'files' in data and data['files']:
        file_id = data['files'].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å Telegram
        file_content = bot.download_file(file_path)
        # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Base64
        file_base64 = base64.b64encode(file_content).decode('utf-8')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫ –∑–∞–ø—Ä–æ—Å—É
        payload['fields']['ufCrm40_1724763290'] = [
            {
                "name": "filename.ext",
                "content": file_base64
            }
        ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    try:
        response = requests.post(BITRIX24_WEBHOOK_URL, json=payload, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    except requests.exceptions.RequestException as e:

        return

    if response.status_code == 200:
        lead_id = response.json().get("result", {}).get("item", {}).get("id")
        if lead_id:
            delete_user_messages(data['chat_id'])  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ
            send_confirmation_message_dev(data.get('chat_id'), lead_id, data['companyname'], data['comments'], data['name'], data['phone'])
    else:
        print(f"Failed to add lead to Bitrix24: {response.text}")

#–û—Ç–∫—Ä—ã—Ç–∞—è –ª–∏–Ω–∏—è
def send_message_to_chat(companyname, name, phone):
    BITRIX24_WEBHOOK_URL = "https://tamplier.bitrix24.ru/rest/572/rebx9fxt0uas87fp/im.message.add.json"
    payload = {
        "CHAT_ID": 2,  # ID —á–∞—Ç–∞
        "MESSAGE": "–ö–ª–∏–µ–Ω—Ç—É –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n"\
                   f"–ò–º—è: {name}\n" \
                   f"–°–æ—Å—Ç–∞–≤ –∑–∞—è–≤–∫–∏:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {companyname}\n" \
                   f"2. –ò–º—è: {name}\n" \
                   f"3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    }
    response = requests.post(BITRIX24_WEBHOOK_URL, json=payload)
    result = response.json()

    if response.status_code == 200 and result.get('result'):
        print("Message sent successfully")
        return result['result']
    else:
        print(f"Failed to send message: {result}")
        return None

#–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
def send_confirmation_message_dev(chat_id, lead_id, companyname, comments, name, phone):
    if not chat_id:
        print("Chat ID is missing")
        return

    message_text = f"–°–ø–∞—Å–∏–±–æ, {name}!\n" \
                   f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –ï–π –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä - {lead_id}.\n" \
                   f"–°–æ—Å—Ç–∞–≤ –∑–∞—è–≤–∫–∏:\n1.–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {companyname}\n" \
                   f"2.–ó–∞–¥–∞—á–∞: {comments}\n" \
                   f"3.–ò–º—è: {name}\n" \
                   f"4.–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"

    try:
        bot.send_message(chat_id, message_text)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error sending message to chat {chat_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /claim
@bot.message_handler(commands=['claim'])
def start_feedback(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    user_steps[chat_id] = 1  # –ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥
    ask_claim_question(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /feedback
@bot.message_handler(commands=['feedback'])
def start_feedback(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    user_steps[chat_id] = 1  # –ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥
    ask_feedback_question(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    welcome_text = (
        "üëãüèª–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç Tamplier digital.\n–°–æ –º–Ω–æ–π –í—ã –º–æ–∂–µ—Ç–µ : \n\n‚ùóÔ∏è1.–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å ( –∞–≤–∞—Ä–∏—è, –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –ø–æ—Ä—Ç–∞–ª–∞)\n\nüõ†2.–î–æ—Ä–∞–±–æ—Ç–∫—É –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n\nüîî3.–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ë–∏—Ç—Ä–∏–∫—Å24\n\nüì©4.–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ–π—Ç–∏ –æ–Ω–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. \n\n" \
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n" \
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" \
        "/service - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n" \
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n"\
        "/feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ\n"\
        "/claim - –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ")
    bot.send_message(chat_id, welcome_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /service
@bot.message_handler(commands=['service'])
def service(message):
    chat_id = message.chat.id
    user_steps[chat_id] = 0
    request_next_part_of_data(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    chat_id = message.chat.id
    help_text = "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏:\n" \
                "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" \
                "/service - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n" \
                "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ\n"\
                "/claim - –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ"
    bot.send_message(chat_id, help_text)

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data in request_type_mapping)
def handle_request_type(call: CallbackQuery):
    chat_id = call.message.chat.id
    request_type_id = request_type_mapping[call.data]

    user_data[chat_id] = user_data.get(chat_id, {})
    user_data[chat_id]['request_type'] = request_type_id

    if request_type_id == 716:  # –ê–≤–∞—Ä–∏—è
        msg = bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: –ê–≤–∞—Ä–∏—è.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª ‚Äì —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞.")
    elif request_type_id == 718:  # –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ
        msg = bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª ‚Äì —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞..")
    elif request_type_id == 798:  # –û–±—É—á–µ–Ω–∏–µ
        msg = bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: –û–±—É—á–µ–Ω–∏–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ –∫–∞–∫–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ë–∏—Ç—Ä–∏–∫—Å24 –Ω—É–∂–Ω–æ –æ–±—É—á–µ–Ω–∏–µ.")
    elif request_type_id == 720:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24
        msg = bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –≤–∞—à–µ–º –ë–∏—Ç—Ä–∏–∫—Å24.")
    elif request_type_id == 724:  # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        msg = bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.\n–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –¢–ó / –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏.")
    elif request_type_id == 798:  # –û–±—É—á–µ–Ω–∏–µ
        msg = bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: –û–±—É—á–µ–Ω–∏–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ –∫–∞–∫–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ë–∏—Ç—Ä–∏–∫—Å24 –Ω—É–∂–Ω–æ –æ–±—É—á–µ–Ω–∏–µ?.")
    elif request_type_id == 722:  # –û—Ç–∫—Ä—ã—Ç–∞—è –ª–∏–Ω–∏—è
        msg = bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è.")
    else:
        msg = bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {call.data}. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.")

    bot.register_next_step_handler(msg, request_next_part_of_data)
    user_messages[chat_id].append(msg.message_id)
    user_steps[chat_id] = 3


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º (–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç)
@bot.message_handler(func=lambda message: user_steps.get(message.chat.id, 0) == 7)
def handle_test_answer(message):
    chat_id = message.chat.id
    question_index = test_results[chat_id]["current_question"]

    if question_index >= len(test_questions):
        return

    question_data = test_questions[question_index]
    selected_answer = message.text

    if selected_answer in question_data["answers"]:
        selected_answer_index = question_data["answers"].index(selected_answer)
        correct_answer = question_data["correct"]

        if selected_answer_index == correct_answer:
            test_results[chat_id]["correct_answers"] += 1

    test_results[chat_id]["current_question"] += 1
    ask_test_question(message)


# –ö–æ–º–∞–Ω–¥–∞ /test
# @bot.message_handler(commands=['test'])
# def start_test(message):
#     chat_id = message.chat.id
#     test_results[chat_id] = {"correct_answers": 0, "current_question": 0}
#     msg = bot.send_message(chat_id,
#                            "–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5-—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ë–∏—Ç—Ä–∏–∫—Å24. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#     bot.register_next_step_handler(msg, ask_test_question)
#
#
# def ask_test_question(message):
#     chat_id = message.chat.id
#     question_index = test_results[chat_id]["current_question"]
#
#     if question_index < len(test_questions):
#         question_data = test_questions[question_index]
#         markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
#
#         for answer in question_data["answers"]:
#             markup.add(KeyboardButton(answer))
#
#         bot.send_message(chat_id, question_data["question"], reply_markup=markup)
#         user_steps[chat_id] = 7  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
#
#     else:
#         correct_answers = test_results[chat_id]["correct_answers"]
#         bot.send_message(chat_id,
#                          f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_answers} –∏–∑ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
#         user_steps[chat_id] = 0


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_unknown_message(message):
    chat_id = message.chat.id
    help_text = ("–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ —Å–æ–≤—Å–µ–º –≤–∞—Å –ø–æ–Ω—è–ª. –í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n"
                 "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" \
                 "/service - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n" \
                 "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ\n"\
                 "/claim - –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ")
    bot.send_message(chat_id, help_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)